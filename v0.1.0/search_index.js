var documenterSearchIndex = {"docs":
[{"location":"#UpROOT.jl-1","page":"Home","title":"UpROOT.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"UpROOT.jl is a Julia wrapper around the Python uproot package.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"uproot makes it possible to read and write CERN ROOT files via pure Python (with certain limitations), without requiring a ROOT installation.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"UpROOT.jl requires the Python uproot package. If PyCall.jl is configured to use Conda.jl for package management (default on OS-X and Windows systems), uproot should be installed automatically when UpROOT.jl is loaded for the first time. Otherwise, please install uproot manually before using UpROOT.jl.","category":"page"},{"location":"#Usage-1","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"UpROOT.jl exposes TFiles and TDirectories with a Dict-like API, TTrees and TBrances as exposed as out-of-core AbstractVectors that also support the Tables interface (with column-access). Opening a ROOT file and reading the contents is straightforward:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"using UpROOT, Tables, TypedTables, ArraysOfArrays\n\nfile = TFile(UpROOT.testfiles[\"HZZ\"])\nprintln(keys(file))\n\ntree = file[\"events\"]\nTables.istable(tree) == true\n\ntree[1] isa NamedTuple\ntree[1:5] isa TypedTables.Table\n\ntree.Jet_E isa AbstractVector\ntree.Jet_E[1:5] isa VectorOfVectors","category":"page"},{"location":"#","page":"Home","title":"Home","text":"In addition to the standard Python/Julia type conversions provided by PyCall.jl, UpROOT.jl maps some special Python types used by uproot (e.g. types from the awkward-array package) to Julia equivalents like VectorOfVectorss and Tables.","category":"page"},{"location":"#Limitations-1","page":"Home","title":"Limitations","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Quite a bit of functionality of the Python uproot package (like writing files and caching of data) is not implemented/wrapped by UpROOT.jl yet. For now, please use the function UpROOT.pyobj to get the Python object wrapped by any UpROOT.jl type and access the unwrapped features directly via PyCall.jl. The python imports/modules uproot and awkward are available as UpROOT.uproot and UpROOT.awkward.","category":"page"},{"location":"api/#API-1","page":"API","title":"API","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"DocTestSetup  = quote\n    using UpROOT\nend","category":"page"},{"location":"api/#Types-1","page":"API","title":"Types","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"Order = [:type]","category":"page"},{"location":"api/#Functions-1","page":"API","title":"Functions","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"Order = [:function]","category":"page"},{"location":"api/#Documentation-1","page":"API","title":"Documentation","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"Modules = [UpROOT]\nOrder = [:type, :function]","category":"page"},{"location":"api/#UpROOT.TBranch","page":"API","title":"UpROOT.TBranch","text":"TBranch <: AbstractVector{Any}\n\nUpROOT.TBranch is a wrapper around Python objects with mix-in uproot.tree.TBranchMethods. It behaves like a Julia AbstractVector. Ff the branch has children, it also behaves like a Tables.Table (with column access).\n\nLimitations: Write access is not implemented yet.\n\n\n\n\n\n","category":"type"},{"location":"api/#UpROOT.TDirectory","page":"API","title":"UpROOT.TDirectory","text":"TDirectory\n\nUpROOT.TDirectory is a wrapper around Python objects of type uproot.rootio.ROOTDirectory.\n\nTDirectory behaves similar to a Julia Dict, it supports the functions keys, length and getindex.\n\nLimitations: Write access is not implemented yet.\n\nTFile is defined as an alias for TDirectory in UpROOT.jl.\n\n\n\n\n\n","category":"type"},{"location":"api/#UpROOT.TFile","page":"API","title":"UpROOT.TFile","text":"TFile = TDirectory\n\nThe uproot Python package doesn't use separate types for the ROOT classes TFile and TDirectoy - so in UpROOT.jl, so in UpROOT.jl, TFile is just defined as an alias for TDirectory.\n\nConstructors:\n\n* `TFile(filename::AbstractString)::TFile`\n\nUse TFile(filename) to open files instead of TDirectory(filename) for increased clarity in your code.\n\n\n\n\n\n","category":"type"},{"location":"api/#UpROOT.TTree","page":"API","title":"UpROOT.TTree","text":"TTree <: AbstractVector{Any}\n\nUpROOT.TTree is a wrapper around Python objects with mix-in uproot.tree.TTreeMethods. It behaves like a Julia AbstractVector and Tables.Table (with column access).\n\nLimitations: Write access is not implemented yet.\n\n\n\n\n\n","category":"type"},{"location":"api/#UpROOT.pyobj-Tuple{Any}","page":"API","title":"UpROOT.pyobj","text":"UpROOT.pyobj(x)::PyObject\n\nGet the python object wrapped by Julia object x. x may be a TFile/TDirectory, TDirectory or TBranch.\n\n\n\n\n\n","category":"method"},{"location":"api/#UpROOT.testdatadir-Tuple{}","page":"API","title":"UpROOT.testdatadir","text":"UpROOT.testdatadir()::String\n\nPath to some test data installed by UpROOT.jl for testing and experimentation purposes.\n\nUse UpROOT.testfiles to get Dict of all test files.\n\n\n\n\n\n","category":"method"},{"location":"LICENSE/#LICENSE-1","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/#","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"}]
}
